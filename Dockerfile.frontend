# Dockerfile.frontend 基于现有镜像构建
FROM py310-cmake316-cuda11.3:ubuntu20

# 避免交互界面提示
ENV DEBIAN_FRONTEND=noninteractive

# 使用国内的 apt 镜像源来加速
RUN sed -i 's/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list \
    && sed -i 's/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list

# 更新系统，并安装必要的依赖（含 xz-utils，用于解压 .tar.xz）
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    ca-certificates \
    xz-utils \
    && rm -rf /var/lib/apt/lists/*

# 复制离线下载的 Node.js 安装包到 /tmp
COPY node-v18.20.6-linux-x64.tar.xz /tmp/

# 解压并将 Node.js 安装到 /usr/local/node，再链接到 /usr/local/bin
RUN cd /tmp \
    && tar xvf node-v18.20.6-linux-x64.tar.xz \
    && mv node-v18.20.6-linux-x64 /usr/local/node \
    && ln -s /usr/local/node/bin/node /usr/local/bin/node \
    && ln -s /usr/local/node/bin/npm /usr/local/bin/npm \
    && ln -s /usr/local/node/bin/npx /usr/local/bin/npx \
    && rm -f node-v18.20.6-linux-x64.tar.xz

# 验证 node 和 npm 版本
RUN node -v && npm -v

# （可选）配置 npm 使用国内镜像
RUN npm config set registry https://registry.npmmirror.com

# 设置工作目录
WORKDIR /app

# 复制前端的 package.json 和 package-lock.json，以加速 npm 安装依赖
COPY frontend/package.json frontend/package-lock.json* ./

# 安装前端依赖
RUN npm install

# 在构建前安装 react-router-dom 依赖（如果 package.json 没有直接声明的话）
RUN npm install react-router-dom

# 复制前端全部代码
COPY frontend/ ./

# 构建前端静态文件
RUN npm run build

# 设置 npm 全局安装前缀为 /usr/local，使得安装的 serve 命令出现在 /usr/local/bin 下
RUN npm config set prefix /usr/local

# 全局安装 serve 用于提供静态页面服务
RUN npm install -g serve

# 确保 /usr/local/bin 在 PATH 中
ENV PATH="/usr/local/bin:$PATH"

# 如果不需要 NVIDIA 的入口脚本，可以覆盖它：
ENTRYPOINT []

# 暴露服务端口
EXPOSE 3000

# 使用 serve 的绝对路径启动服务
CMD ["/usr/local/bin/serve", "-s", "build", "-l", "3000"]